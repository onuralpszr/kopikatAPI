[tool.poetry]
name = "kopikatapi"
version = "0.0.2"
description = "Kopikat.co Python Client for API access"
authors = ["Onuralp SEZER <thunderbirdtr@gmail.com>"]
readme = "README.md"
packages = [{include = "kopikatapi"}]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
]

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.31.0"
opencv-python = "^4.8.0.74"
pillow = "^10.0.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"


[tool.bandit]
target = ["tests", "metaseg"]
tests = ["B201", "B301"]

[tool.autoflake]
check = true
imports = ["cv2", "requests", "metaseg"]


[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
ignore-init-module-imports = true

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "PD", "PGH", "PIE", "PL", "PT", "PTH", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

select = [
    # flake8-builtins
    "A",
    # flake8-blind-except
    "BLE",
    # flake8-comprehensions
    "C4",
    # mccabe complexity
    "C90",
    # pydocstyle
    "D",
    # pycodestyle
    "E", "W",
    # eradicate (remove commented out code)
    "ERA",
    # pyflakes
    "F",
    # flake8-logging-format
    "G",
    # isort
    "I",
    # flake8-import-conventions
    "ICN",
    # flake8-implicit-str-concat
    "ISC",
    # pylint
    "PLC", "PLE", "PLR", "PLW",
    # misc lints
    "PIE",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # pygrep-hooks
    "PGH",
    # flake8-quotes
    "Q",
    # flake8-bandit
    "S",
    # flake8-debugger
    "T10",
    # flake8-print
    "T20",
    # flake8-type-checking
    "TCH",
    # tidy imports
    "TID",
    # pyupgrade
    "UP",
    # Ruff-specific rules
    "RUF",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "examples",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402","F401"]

[tool.ruff.pylint]
max-args = 20

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
